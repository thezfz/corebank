[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "corebank"
version = "1.0.0"
description = "CoreBank - A secure and robust banking system backend"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "CoreBank Team", email = "team@corebank.com"},
]
keywords = ["banking", "fastapi", "postgresql", "finance"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Office/Business :: Financial",
]

dependencies = [
    # Web Framework
    "fastapi>=0.111.0",
    "uvicorn[standard]>=0.29.0",
    
    # Data Validation & Settings
    "pydantic>=2.7.1",
    "pydantic-settings>=2.3.0",
    
    # Database
    "psycopg[binary]>=3.1,<3.2",
    "psycopg-pool>=3.1,<3.2",
    "alembic>=1.13.1",
    
    # Security
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.9",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.2.1",
    "pytest-asyncio>=0.23.7",
    "pytest-mock>=3.14.0",
    "pytest-cov>=5.0.0",
    "httpx>=0.27.0",
    "asgi-lifespan>=2.1.0",
    "factory-boy>=3.3.0",
    "faker>=25.0.0",
    
    # Code Quality
    "ruff>=0.4.5",
    "mypy>=1.10.0",
    "types-passlib>=1.7.7",
    "types-python-jose>=3.3.4",
]

[project.urls]
Homepage = "https://github.com/corebank/corebank"
Documentation = "https://docs.corebank.com"
Repository = "https://github.com/corebank/corebank.git"
Issues = "https://github.com/corebank/corebank/issues"

[tool.hatch.build.targets.wheel]
packages = ["corebank"]

[tool.hatch.build.targets.sdist]
include = [
    "/corebank",
    "/README.md",
    "/pyproject.toml"
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["corebank"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = [
    "passlib.*",
    "jose.*",
    "factory.*",
    "faker.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "-ra",
    "--cov=corebank",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["corebank"]
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
