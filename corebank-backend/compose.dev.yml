services:
  # PostgreSQL Database
  postgres:
    image: docker.io/library/postgres:16
    container_name: corebank_postgres
    environment:
      POSTGRES_USER: corebank_user
      POSTGRES_PASSWORD: corebank_secure_password_2024
      POSTGRES_DB: corebank
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - corebank_dev_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U corebank_user -d corebank"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Containerfile
    container_name: corebank_backend
    env_file: .env
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=corebank_user
      - POSTGRES_PASSWORD=corebank_secure_password_2024
      - POSTGRES_DB=corebank
      - POSTGRES_PORT=5432
      - SECRET_KEY=b10e02d6d1f5c4281819bf288cf3c8eab7d17ade3a25970d12963a572e083ea8
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
    ports:
      - "8001:8000"
    volumes:
      - .:/app:z  # Mount source code for hot reload
    depends_on:
      - postgres
    networks:
      - corebank_dev_network
    restart: unless-stopped

  # Frontend (Development mode with hot reload)
  frontend:
    build:
      context: ../corebank-frontend
      dockerfile: Containerfile.dev
    container_name: corebank_frontend_dev
    environment:
      - NODE_ENV=development
    ports:
      - "5173:5173"
    volumes:
      # Mount entire source directory for hot reload
      - ../corebank-frontend:/app:z
      # Exclude node_modules to avoid conflicts
      - /app/node_modules
    networks:
      - corebank_dev_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  corebank_dev_network:
    driver: bridge
    name: corebank_dev_network
